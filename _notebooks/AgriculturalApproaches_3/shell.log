2018-06-23 22:04:06 - F# Interactive for F# 4.1
2018-06-23 22:04:06 - Freely distributed under the Apache 2.0 Open Source License
2018-06-23 22:04:06 - For help type #help;;
2018-06-23 22:04:06 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-06-23 22:04:06 -   seq []
2018-06-23 22:04:06 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-06-23 22:04:06 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-06-23 22:04:06 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-06-23 22:04:21 - #load "Paket.fsx"
2018-06-23 22:04:21 - Paket.Package [
2018-06-23 22:04:21 -     "FSharp.Data"
2018-06-23 22:04:21 -     "Deedle"
2018-06-23 22:04:21 -     "XPlot.Plotly"
2018-06-23 22:04:21 -     ]
2018-06-23 22:04:21 - #load "Paket.Generated.Refs.fsx"
2018-06-23 22:04:38 - open System
2018-06-23 22:04:38 - open FSharp.Data
2018-06-23 22:04:38 - open Deedle
2018-06-23 22:04:38 - #load "XPlot.Plotly.fsx"
2018-06-23 22:04:38 - open XPlot.Plotly
2018-06-23 22:04:39 - let wb = WorldBankData.GetDataContext()
2018-06-23 22:04:40 - let ukCerealYields = 
2018-06-23 22:04:40 -     wb.Countries.``United Kingdom``
2018-06-23 22:04:40 -         .Indicators.``Cereal yield (kg per hectare)``
2018-06-23 22:04:40 - let ukTractorDensities =
2018-06-23 22:04:40 -     wb.Countries.``United Kingdom``
2018-06-23 22:04:40 -         .Indicators.``Agricultural machinery, tractors per 100 sq. km of arable land``
2018-06-23 22:04:46 - ukTractorDensity
2018-06-23 22:04:46 -     |> Chart.Line
2018-06-23 22:04:46 -     |> Chart.WithLayout(Layout(title = "UK Tractor Density",
2018-06-23 22:04:46 -                                 showlegend = false, 
2018-06-23 22:04:46 -                                 xaxis=Xaxis(title="Year"),
2018-06-23 22:04:46 -                                 yaxis=Yaxis(title="Tractors per 100 sq. km")))
2018-06-23 22:04:47 - The value or constructor 'ukTractorDensity' is not defined. Maybe you want one of the following:
2018-06-23 22:04:47 -    ukTractorDensities
2018-06-23 22:04:47 - A unique overload for method 'Line' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: static member Chart.Line : data:seq<#key * #value> -> PlotlyChart, static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value, static member Chart.Line : data:seq<#value> -> PlotlyChart
2018-06-23 22:04:47 - let ukTractorEffectFrame =
2018-06-23 22:04:47 -     frame [
2018-06-23 22:04:47 -             "ukCerealYield" => Series(ukCerealYields |> dict);
2018-06-23 22:04:47 -             "ukTractorDensity" => Series(ukTractorDensities |> dict)
2018-06-23 22:04:47 -             ]
2018-06-23 22:04:47 - ukTractorEffectFrame
2018-06-23 22:04:47 -     |> Frame.toArray2D
2018-06-23 22:04:47 -     |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-06-23 22:04:47 -     |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-06-23 22:04:47 -     |> Chart.Scatter
2018-06-23 22:04:47 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-06-23 22:04:47 -                                 showlegend = false, 
2018-06-23 22:04:47 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-06-23 22:04:47 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-01 17:48:41 - F# Interactive for F# 4.1
2018-07-01 17:48:41 - Freely distributed under the Apache 2.0 Open Source License
2018-07-01 17:48:41 - For help type #help;;
2018-07-01 17:48:41 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-01 17:48:41 -   seq []
2018-07-01 17:48:41 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-01 17:48:41 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-01 17:48:41 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-01 18:07:09 - F# Interactive for F# 4.1
2018-07-01 18:07:09 - Freely distributed under the Apache 2.0 Open Source License
2018-07-01 18:07:09 - For help type #help;;
2018-07-01 18:07:09 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-01 18:07:09 -   seq []
2018-07-01 18:07:09 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-01 18:07:09 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-01 18:07:09 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-01 18:07:11 - Unknown content type on shell. msg_type is `comm_info_request`
2018-07-01 18:07:20 - shutdown request
2018-07-01 18:07:27 - F# Interactive for F# 4.1
2018-07-01 18:07:27 - Freely distributed under the Apache 2.0 Open Source License
2018-07-01 18:07:27 - For help type #help;;
2018-07-01 18:07:27 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-01 18:07:27 -   seq []
2018-07-01 18:07:27 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-01 18:07:27 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-01 18:07:27 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-01 18:40:32 - Util.Image("img\masseyfergusson.jpg")
2018-07-01 18:45:15 - #load "Paket.fsx"
2018-07-01 18:45:15 - Paket.Package [
2018-07-01 18:45:15 -     "FSharp.Data"
2018-07-01 18:45:15 -     "Deedle"
2018-07-01 18:45:15 -     "XPlot.Plotly"
2018-07-01 18:45:15 -     ]
2018-07-01 18:45:15 - #load "Paket.Generated.Refs.fsx"
2018-07-07 14:09:01 - F# Interactive for F# 4.1
2018-07-07 14:09:01 - Freely distributed under the Apache 2.0 Open Source License
2018-07-07 14:09:01 - For help type #help;;
2018-07-07 14:09:01 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-07 14:09:01 -   seq []
2018-07-07 14:09:01 - --> Added 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-07 14:09:01 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-07 14:09:01 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-07 14:09:06 - Unknown content type on shell. msg_type is `comm_info_request`
2018-07-07 14:11:01 - #load "Paket.fsx"
2018-07-07 14:11:01 - Paket.Package [
2018-07-07 14:11:01 -     "FSharp.Data"
2018-07-07 14:11:01 -     "Deedle"
2018-07-07 14:11:01 -     "XPlot.Plotly"
2018-07-07 14:11:01 -     ]
2018-07-07 14:11:01 - #load "Paket.Generated.Refs.fsx"
2018-07-07 14:11:25 - open System
2018-07-07 14:11:25 - open FSharp.Data
2018-07-07 14:11:25 - open Deedle
2018-07-07 14:11:25 - #load "XPlot.Plotly.fsx"
2018-07-07 14:11:25 - open XPlot.Plotly
2018-07-07 14:11:27 - let wb = WorldBankData.GetDataContext()
2018-07-07 14:11:27 - let ukCerealYields = 
2018-07-07 14:11:27 -     wb.Countries.``United Kingdom``
2018-07-07 14:11:27 -         .Indicators.``Cereal yield (kg per hectare)``
2018-07-07 14:11:27 - let ukTractorDensities =
2018-07-07 14:11:27 -     wb.Countries.``United Kingdom``
2018-07-07 14:11:27 -         .Indicators.``Agricultural machinery, tractors per 100 sq. km of arable land``
2018-07-07 14:11:45 - ukTractorDensity
2018-07-07 14:11:45 -     |> Chart.Line
2018-07-07 14:11:45 -     |> Chart.WithLayout(Layout(title = "UK Tractor Density",
2018-07-07 14:11:45 -                                 showlegend = false, 
2018-07-07 14:11:45 -                                 xaxis=Xaxis(title="Year"),
2018-07-07 14:11:45 -                                 yaxis=Yaxis(title="Tractors per 100 sq. km")))
2018-07-07 14:11:45 - The value or constructor 'ukTractorDensity' is not defined. Maybe you want one of the following:
2018-07-07 14:11:45 -    ukTractorDensities
2018-07-07 14:11:45 - A unique overload for method 'Line' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: static member Chart.Line : data:seq<#key * #value> -> PlotlyChart, static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value, static member Chart.Line : data:seq<#value> -> PlotlyChart
2018-07-07 14:11:45 - let ukTractorEffectFrame =
2018-07-07 14:11:45 -     frame [
2018-07-07 14:11:45 -             "ukCerealYield" => Series(ukCerealYields |> dict);
2018-07-07 14:11:45 -             "ukTractorDensity" => Series(ukTractorDensities |> dict)
2018-07-07 14:11:45 -             ]
2018-07-07 14:11:46 - let (m, c) =
2018-07-07 14:11:46 -     ukTractorEffectFrame
2018-07-07 14:11:46 -         |> Frame.toArray2D
2018-07-07 14:11:46 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 14:11:46 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 14:11:46 -         |> Chart.Scatter
2018-07-07 14:11:46 -         |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-07 14:11:46 -                                     showlegend = false, 
2018-07-07 14:11:46 -                                     xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 14:11:46 -                                     yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 14:11:46 - (m, c)
2018-07-07 14:11:46 - Type mismatch. Expecting a
2018-07-07 14:11:46 -     'PlotlyChart -> obj * obj'    
2018-07-07 14:11:46 - but given a
2018-07-07 14:11:46 -     'PlotlyChart -> PlotlyChart'    
2018-07-07 14:11:46 - The type 'obj * obj' does not match the type 'PlotlyChart'
2018-07-07 14:11:46 - Type mismatch. Expecting a
2018-07-07 14:11:46 -     'PlotlyChart -> obj * obj'    
2018-07-07 14:11:46 - but given a
2018-07-07 14:11:46 -     'PlotlyChart -> PlotlyChart'    
2018-07-07 14:11:46 - The type 'obj * obj' does not match the type 'PlotlyChart'
2018-07-07 14:11:46 - let test = ukTractorEffectFrame.Columns
2018-07-07 14:14:09 - ukTractorDensities
2018-07-07 14:14:09 -     |> Chart.Line
2018-07-07 14:14:09 -     |> Chart.WithLayout(Layout(title = "UK Tractor Density",
2018-07-07 14:14:09 -                                 showlegend = false, 
2018-07-07 14:14:09 -                                 xaxis=Xaxis(title="Year"),
2018-07-07 14:14:09 -                                 yaxis=Yaxis(title="Tractors per 100 sq. km")))
2018-07-07 14:14:36 - ukTractorEffectFrame
2018-07-07 14:14:36 -     |> Frame.toArray2D
2018-07-07 14:14:36 -     |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 14:14:36 -     |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 14:14:36 -     |> Chart.Scatter
2018-07-07 14:14:36 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-07 14:14:36 -                                 showlegend = false, 
2018-07-07 14:14:36 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 14:14:36 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 14:14:36 -                                     
2018-07-07 14:16:45 - Paket.Package [
2018-07-07 14:16:45 -     "MathNet.Numerics"
2018-07-07 14:16:45 -     "MathNet.Numerics.FSharp"
2018-07-07 14:16:45 -     ]
2018-07-07 14:16:45 - #load "Paket.Generated.Refs.fsx"
2018-07-07 14:18:32 - open MathNet.Numerics
2018-07-07 14:18:33 - let (m, c) =
2018-07-07 14:18:33 -     ukTractorEffectFrame
2018-07-07 14:18:33 -         |> Frame.toArray2D
2018-07-07 14:18:33 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 14:18:33 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 14:18:33 -         |> Array.unzip
2018-07-07 14:18:33 -         |> Fit.Line
2018-07-07 14:18:33 - m, c
2018-07-07 14:18:37 - let test = ukTractorEffectFrame.Columns
2018-07-07 14:18:41 - test
2018-07-07 14:20:07 - let test = ukTractorEffectFrame.Columns |> Dict
2018-07-07 14:20:07 - The value or constructor 'Dict' is not defined. Maybe you want one of the following:
2018-07-07 14:20:07 -    dict
2018-07-07 14:20:07 -    Direction
2018-07-07 14:20:07 -    Directive
2018-07-07 14:20:11 - let test = ukTractorEffectFrame.Columns |> dict
2018-07-07 14:20:11 - The type 'ColumnSeries<int,string>' is not compatible with the type 'seq<obj * obj>'
2018-07-07 14:20:13 - test
2018-07-07 14:21:02 - ukTractorEffectFrame.Columns |> Array
2018-07-07 14:21:02 - This type has no accessible object constructors
2018-07-07 14:21:06 - ukTractorEffectFrame.Columns |> array
2018-07-07 14:21:06 - The value or constructor 'array' is not defined.
2018-07-07 14:21:14 - [| ukTractorEffectFrame.Columns |]
2018-07-07 14:21:36 - ukTractorEffectFrame.Columns |> Array.map(fun s -> s)
2018-07-07 14:21:36 - Type mismatch. Expecting a
2018-07-07 14:21:36 -     'ColumnSeries<int,string> -> obj'    
2018-07-07 14:21:36 - but given a
2018-07-07 14:21:36 -     'obj [] -> obj []'    
2018-07-07 14:21:36 - The type 'ColumnSeries<int,string>' does not match the type 'obj []'
2018-07-07 14:21:36 - Type mismatch. Expecting a
2018-07-07 14:21:36 -     'ColumnSeries<int,string> -> obj'    
2018-07-07 14:21:36 - but given a
2018-07-07 14:21:36 -     'obj [] -> obj []'    
2018-07-07 14:21:36 - The type 'ColumnSeries<int,string>' does not match the type 'obj []'
2018-07-07 14:22:02 - ukTractorEffectFrame.Columns |> Seq.map(fun s -> s)
2018-07-07 14:22:02 - The type 'ColumnSeries<int,string>' is not compatible with the type 'seq<obj>'
2018-07-07 14:22:12 - ukTractorEffectFrame.Values
2018-07-07 14:22:12 - The field, constructor or member 'Values' is not defined.
2018-07-07 14:22:31 - ukTractorEffectFrame |> Series.Values
2018-07-07 14:22:31 - Property 'Values' is not static
2018-07-07 15:23:56 - let xi = seq { 625 .. 1 .. 770 }
2018-07-07 15:23:56 - let yi = m*xi + c
2018-07-07 15:23:56 - [    ukTractorEffectFrame
2018-07-07 15:23:56 -         |> Frame.toArray2D
2018-07-07 15:23:56 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:23:56 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:23:56 -         |> Chart.Scatter;
2018-07-07 15:23:56 -     (xi,yi) |> Chart.Line    ]
2018-07-07 15:23:56 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:23:56 -                                 showlegend = false, 
2018-07-07 15:23:56 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:23:56 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:23:56 - The type 'seq<int>' does not match the type 'float'
2018-07-07 15:23:56 - The type 'seq<int>' does not match the type 'float'
2018-07-07 15:23:56 - The value or constructor 'yi' is not defined. Maybe you want one of the following:
2018-07-07 15:23:56 -    Y
2018-07-07 15:23:56 -    xi
2018-07-07 15:23:56 - No overloads match for method 'Line'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:23:56 - Possible overload: 'static member Chart.Line : data:seq<#value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:23:56 -     'seq<int> * obj'    
2018-07-07 15:23:56 - is not compatible with type
2018-07-07 15:23:56 -     'seq<'a>'    
2018-07-07 15:23:56 - .
2018-07-07 15:23:56 - Possible overload: 'static member Chart.Line : data:seq<#key * #value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:23:56 -     'seq<int> * obj'    
2018-07-07 15:23:56 - is not compatible with type
2018-07-07 15:23:56 -     'seq<'a * 'b>'    
2018-07-07 15:23:56 - .
2018-07-07 15:23:56 - Possible overload: 'static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value'. Type constraint mismatch. The type 
2018-07-07 15:23:56 -     'seq<int> * obj'    
2018-07-07 15:23:56 - is not compatible with type
2018-07-07 15:23:56 -     'seq<'a>'    
2018-07-07 15:23:56 - .
2018-07-07 15:23:56 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:23:56 -    Failure
2018-07-07 15:24:07 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:24:07 - let yi = m*xi + c
2018-07-07 15:24:07 - [    ukTractorEffectFrame
2018-07-07 15:24:07 -         |> Frame.toArray2D
2018-07-07 15:24:07 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:24:07 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:24:07 -         |> Chart.Scatter;
2018-07-07 15:24:07 -     (xi,yi) |> Chart.Line    ]
2018-07-07 15:24:07 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:24:07 -                                 showlegend = false, 
2018-07-07 15:24:07 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:24:07 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:24:08 - The type 'seq<float>' does not match the type 'float'
2018-07-07 15:24:08 - The type 'seq<float>' does not match the type 'float'
2018-07-07 15:24:08 - The value or constructor 'yi' is not defined. Maybe you want one of the following:
2018-07-07 15:24:08 -    Y
2018-07-07 15:24:08 -    xi
2018-07-07 15:24:08 - No overloads match for method 'Line'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:24:08 - Possible overload: 'static member Chart.Line : data:seq<#value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:24:08 -     'seq<float> * obj'    
2018-07-07 15:24:08 - is not compatible with type
2018-07-07 15:24:08 -     'seq<'a>'    
2018-07-07 15:24:08 - .
2018-07-07 15:24:08 - Possible overload: 'static member Chart.Line : data:seq<#key * #value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:24:08 -     'seq<float> * obj'    
2018-07-07 15:24:08 - is not compatible with type
2018-07-07 15:24:08 -     'seq<'a * 'b>'    
2018-07-07 15:24:08 - .
2018-07-07 15:24:08 - Possible overload: 'static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value'. Type constraint mismatch. The type 
2018-07-07 15:24:08 -     'seq<float> * obj'    
2018-07-07 15:24:08 - is not compatible with type
2018-07-07 15:24:08 -     'seq<'a>'    
2018-07-07 15:24:08 - .
2018-07-07 15:24:08 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:24:08 -    Failure
2018-07-07 15:24:54 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:24:54 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:24:54 - [    ukTractorEffectFrame
2018-07-07 15:24:54 -         |> Frame.toArray2D
2018-07-07 15:24:54 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:24:54 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:24:54 -         |> Chart.Scatter;
2018-07-07 15:24:54 -     (xi,yi) |> Chart.Line    ]
2018-07-07 15:24:54 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:24:54 -                                 showlegend = false, 
2018-07-07 15:24:54 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:24:54 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:24:54 - No overloads match for method 'Line'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:24:54 - Possible overload: 'static member Chart.Line : data:seq<#value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:24:54 -     'seq<float> * seq<float>'    
2018-07-07 15:24:54 - is not compatible with type
2018-07-07 15:24:54 -     'seq<'a>'    
2018-07-07 15:24:54 - .
2018-07-07 15:24:54 - Possible overload: 'static member Chart.Line : data:seq<#key * #value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:24:54 -     'seq<float> * seq<float>'    
2018-07-07 15:24:54 - is not compatible with type
2018-07-07 15:24:54 -     'seq<'a * 'b>'    
2018-07-07 15:24:54 - .
2018-07-07 15:24:54 - Possible overload: 'static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value'. Type constraint mismatch. The type 
2018-07-07 15:24:54 -     'seq<float> * seq<float>'    
2018-07-07 15:24:54 - is not compatible with type
2018-07-07 15:24:54 -     'seq<'a>'    
2018-07-07 15:24:54 - .
2018-07-07 15:24:54 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:24:54 -    Failure
2018-07-07 15:25:14 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:25:14 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:25:14 - [    ukTractorEffectFrame
2018-07-07 15:25:14 -         |> Frame.toArray2D
2018-07-07 15:25:14 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:25:14 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:25:14 -         |> Chart.Scatter;
2018-07-07 15:25:14 -     (xi;yi) |> Chart.Line    ]
2018-07-07 15:25:14 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:25:14 -                                 showlegend = false, 
2018-07-07 15:25:14 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:25:14 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:25:14 - The result of this expression is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.
2018-07-07 15:25:14 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:25:14 -    Failure
2018-07-07 15:25:28 - (xi;yi)
2018-07-07 15:25:28 - The value or constructor 'xi' is not defined. Maybe you want one of the following:
2018-07-07 15:25:28 -    X
2018-07-07 15:25:28 - The value or constructor 'yi' is not defined. Maybe you want one of the following:
2018-07-07 15:25:28 -    Y
2018-07-07 15:25:56 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:25:56 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:25:56 - [    ukTractorEffectFrame
2018-07-07 15:25:56 -         |> Frame.toArray2D
2018-07-07 15:25:56 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:25:56 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:25:56 -         |> Chart.Scatter;
2018-07-07 15:25:56 -     (xi,yi) 
2018-07-07 15:25:56 -         |> Seq.zip
2018-07-07 15:25:56 -         |> Chart.Line    ]
2018-07-07 15:25:56 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:25:56 -                                 showlegend = false, 
2018-07-07 15:25:56 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:25:56 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:25:56 - The type 'seq<float> * seq<float>' is not compatible with the type 'seq<obj>'
2018-07-07 15:25:56 - A unique overload for method 'Line' could not be determined based on type information prior to this program point. A type annotation may be needed. Candidates: static member Chart.Line : data:seq<#key * #value> -> PlotlyChart, static member Chart.Line : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value, static member Chart.Line : data:seq<#value> -> PlotlyChart
2018-07-07 15:25:56 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:25:56 -    Failure
2018-07-07 15:26:21 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:26:21 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:26:21 - [    ukTractorEffectFrame
2018-07-07 15:26:21 -         |> Frame.toArray2D
2018-07-07 15:26:21 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:26:21 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:26:21 -         |> Chart.Scatter;
2018-07-07 15:26:21 -     xi 
2018-07-07 15:26:21 -         |> Seq.zip(yi)
2018-07-07 15:26:21 -         |> Chart.Line    ]
2018-07-07 15:26:21 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:26:21 -                                 showlegend = false, 
2018-07-07 15:26:21 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:26:21 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:26:21 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:26:21 -    Failure
2018-07-07 15:26:29 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:26:29 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:26:29 - [    ukTractorEffectFrame
2018-07-07 15:26:29 -         |> Frame.toArray2D
2018-07-07 15:26:29 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:26:29 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:26:29 -         |> Chart.Scatter;
2018-07-07 15:26:29 -     xi 
2018-07-07 15:26:29 -         |> Seq.zip(yi)
2018-07-07 15:26:29 -         |> Chart.Line    ]
2018-07-07 15:26:29 -     |> Chart.Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:26:29 -                                 showlegend = false, 
2018-07-07 15:26:29 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:26:29 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:26:29 - The field, constructor or member 'Figure' is not defined.
2018-07-07 15:35:03 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:35:03 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:35:03 - [    ukTractorEffectFrame
2018-07-07 15:35:03 -         |> Frame.toArray2D
2018-07-07 15:35:03 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:35:03 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:35:03 -         |> Chart.Scatter;
2018-07-07 15:35:03 -     xi 
2018-07-07 15:35:03 -         |> Seq.zip(yi)
2018-07-07 15:35:03 -         |> Chart.Line    ]
2018-07-07 15:35:03 -     |> Chart.Combine(Layout(title = "UK Tractor Effect", 
2018-07-07 15:35:03 -                                 showlegend = false, 
2018-07-07 15:35:03 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:35:03 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:35:03 - The field, constructor or member 'Combine' is not defined.
2018-07-07 15:37:16 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:37:16 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:37:16 - [    ukTractorEffectFrame
2018-07-07 15:37:16 -         |> Frame.toArray2D
2018-07-07 15:37:16 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:37:16 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:37:16 -         |> Chart.Scatter;
2018-07-07 15:37:16 -     xi 
2018-07-07 15:37:16 -         |> Seq.zip(yi)
2018-07-07 15:37:16 -         |> Chart.Line    ]
2018-07-07 15:37:16 -     |> Data
2018-07-07 15:37:16 -     |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:37:16 -                                 showlegend = false, 
2018-07-07 15:37:16 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:37:16 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:37:16 - The value or constructor 'Data' is not defined.
2018-07-07 15:37:16 - The value or constructor 'Figure' is not defined. Maybe you want one of the following:
2018-07-07 15:37:16 -    Failure
2018-07-07 15:38:25 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:38:25 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:38:25 - [    ukTractorEffectFrame
2018-07-07 15:38:25 -         |> Frame.toArray2D
2018-07-07 15:38:25 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:38:25 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:38:25 -         |> Chart.Scatter;
2018-07-07 15:38:25 -     xi 
2018-07-07 15:38:25 -         |> Seq.zip(yi)
2018-07-07 15:38:25 -         |> Chart.Line    ]
2018-07-07 15:38:25 -     |> ShowAll
2018-07-07 15:38:25 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:38:25 - //                                showlegend = false, 
2018-07-07 15:38:25 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:38:25 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:38:25 - The value or constructor 'ShowAll' is not defined.
2018-07-07 15:38:38 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:38:38 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:38:38 - [    ukTractorEffectFrame
2018-07-07 15:38:38 -         |> Frame.toArray2D
2018-07-07 15:38:38 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:38:38 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:38:38 -         |> Chart.Scatter;
2018-07-07 15:38:38 -     xi 
2018-07-07 15:38:38 -         |> Seq.zip(yi)
2018-07-07 15:38:38 -         |> Chart.Line    ]
2018-07-07 15:38:38 -     |> Chart.ShowAll
2018-07-07 15:38:38 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:38:38 - //                                showlegend = false, 
2018-07-07 15:38:38 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:38:38 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:39:08 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:39:08 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:39:08 - [    ukTractorEffectFrame
2018-07-07 15:39:08 -         |> Frame.toArray2D
2018-07-07 15:39:08 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:39:08 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:39:08 -         |> Chart.Scatter;
2018-07-07 15:39:08 -     xi 
2018-07-07 15:39:08 -         |> Seq.zip(yi)
2018-07-07 15:39:08 -         |> Chart.Line    ]
2018-07-07 15:39:08 -     |> Chart.Plot
2018-07-07 15:39:08 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:39:08 - //                                showlegend = false, 
2018-07-07 15:39:08 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:39:08 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:39:08 - No overloads match for method 'Plot'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:39:08 - Possible overload: 'static member Chart.Plot : data:Trace -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:39:08 -     'PlotlyChart list'    
2018-07-07 15:39:08 - is not compatible with type
2018-07-07 15:39:08 -     'Trace'    
2018-07-07 15:39:08 - .
2018-07-07 15:39:08 - Possible overload: 'static member Chart.Plot : data:seq<#Trace> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:39:08 -     'PlotlyChart list'    
2018-07-07 15:39:08 - is not compatible with type
2018-07-07 15:39:08 -     'seq<'a>'    
2018-07-07 15:39:08 - .
2018-07-07 15:40:21 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:40:21 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:40:21 - [    ukTractorEffectFrame
2018-07-07 15:40:21 -         |> Frame.toArray2D
2018-07-07 15:40:21 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:40:21 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:40:21 -         |> Chart.Scatter;
2018-07-07 15:40:21 -     xi 
2018-07-07 15:40:21 -         |> Seq.zip(yi)
2018-07-07 15:40:21 -         |> Chart.Line    ]
2018-07-07 15:40:21 -     |> PlotlyChart
2018-07-07 15:40:21 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:40:21 - //                                showlegend = false, 
2018-07-07 15:40:21 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:40:21 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:40:21 - This expression was expected to have type
2018-07-07 15:40:21 -     'PlotlyChart list'    
2018-07-07 15:40:21 - but here has type
2018-07-07 15:40:21 -     'unit'    
2018-07-07 15:41:01 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:41:01 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:41:01 - [    ukTractorEffectFrame
2018-07-07 15:41:01 -         |> Frame.toArray2D
2018-07-07 15:41:01 -         |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:41:01 -         |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:41:01 -         |> Scatter;
2018-07-07 15:41:01 -     xi 
2018-07-07 15:41:01 -         |> Seq.zip(yi)
2018-07-07 15:41:01 -         |> Line    ]
2018-07-07 15:41:01 -     |> Chart.Plot
2018-07-07 15:41:01 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:41:01 - //                                showlegend = false, 
2018-07-07 15:41:01 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:41:01 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:41:01 - This expression was expected to have type
2018-07-07 15:41:01 -     'seq<float * float>'    
2018-07-07 15:41:01 - but here has type
2018-07-07 15:41:01 -     'unit'    
2018-07-07 15:41:01 - This expression was expected to have type
2018-07-07 15:41:01 -     'seq<float * float>'    
2018-07-07 15:41:01 - but here has type
2018-07-07 15:41:01 -     'unit'    
2018-07-07 15:42:39 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:42:39 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:42:39 - [Scatter(ukTractorEffectFrame
2018-07-07 15:42:39 -             |> Frame.toArray2D
2018-07-07 15:42:39 -             |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:42:39 -             |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y))));
2018-07-07 15:42:39 -  Line(xi 
2018-07-07 15:42:39 -         |> Seq.zip(yi))]
2018-07-07 15:42:39 -     |> Chart.Plot
2018-07-07 15:42:39 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:42:39 - //                                showlegend = false, 
2018-07-07 15:42:39 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:42:39 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:42:39 - The object constructor 'Scatter' takes 0 argument(s) but is here given 1. The required signature is 'new : unit -> Scatter'.
2018-07-07 15:42:39 - The object constructor 'Line' takes 0 argument(s) but is here given 1. The required signature is 'new : unit -> Line'.
2018-07-07 15:45:14 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:45:14 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:45:14 - [Scatter(ukTractorEffectFrame
2018-07-07 15:45:14 -             |> Frame.toArray2D
2018-07-07 15:45:14 -             |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:45:14 -             |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))) :> Trace;
2018-07-07 15:45:14 -  Line(xi 
2018-07-07 15:45:14 -         |> Seq.zip(yi)) :> Trace]
2018-07-07 15:45:14 -     |> Chart.Plot
2018-07-07 15:45:14 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:45:14 - //                                showlegend = false, 
2018-07-07 15:45:14 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:45:14 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:45:14 - The object constructor 'Scatter' takes 0 argument(s) but is here given 1. The required signature is 'new : unit -> Scatter'.
2018-07-07 15:45:14 - The object constructor 'Line' takes 0 argument(s) but is here given 1. The required signature is 'new : unit -> Line'.
2018-07-07 15:45:27 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:45:27 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:45:27 - [Chart.Scatter(ukTractorEffectFrame
2018-07-07 15:45:27 -             |> Frame.toArray2D
2018-07-07 15:45:27 -             |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-07 15:45:27 -             |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))) :> Trace;
2018-07-07 15:45:27 -  Chart.Line(xi 
2018-07-07 15:45:27 -         |> Seq.zip(yi)) :> Trace]
2018-07-07 15:45:27 -     |> Chart.Plot
2018-07-07 15:45:27 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:45:27 - //                                showlegend = false, 
2018-07-07 15:45:27 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:45:27 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:45:27 - Type constraint mismatch. The type 
2018-07-07 15:45:27 -     'PlotlyChart'    
2018-07-07 15:45:27 - is not compatible with type
2018-07-07 15:45:27 -     'Trace'    
2018-07-07 15:45:27 - Type constraint mismatch. The type 
2018-07-07 15:45:27 -     'PlotlyChart'    
2018-07-07 15:45:27 - is not compatible with type
2018-07-07 15:45:27 -     'Trace'    
2018-07-07 15:47:16 - let trace1' =
2018-07-07 15:47:16 -     Scatter(
2018-07-07 15:47:16 -         x = [0; 1; 2; 3; 4; 5],
2018-07-07 15:47:16 -         y = [1.5; 1.; 1.3; 0.7; 0.8; 0.9]
2018-07-07 15:47:16 -     ) :> Trace
2018-07-07 15:47:16 - let trace2' =
2018-07-07 15:47:16 -     Bar(
2018-07-07 15:47:16 -         x = [0; 1; 2; 3; 4; 5],
2018-07-07 15:47:16 -         y = [1.; 0.5; 0.7; -1.2; 0.3; 0.4]
2018-07-07 15:47:16 -     ) :> Trace
2018-07-07 15:47:16 - let multiLayout = Layout(title = "Line Chart and a Bar Chart")
2018-07-07 15:47:16 - [trace1'; trace2']
2018-07-07 15:47:16 - |> Chart.Plot
2018-07-07 15:47:16 - |> Chart.WithLayout multiLayout
2018-07-07 15:47:16 - |> Chart.WithWidth 700
2018-07-07 15:47:16 - |> Chart.WithHeight 500
2018-07-07 15:51:25 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:51:25 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:51:25 - let trace1' =
2018-07-07 15:51:25 -     [   Scatter(ukTractorEffectFrame
2018-07-07 15:51:25 -                 |> Frame.toArray2D
2018-07-07 15:51:25 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:51:25 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y))))
2018-07-07 15:51:25 -                 |> Array.unzip) :> Trace;
2018-07-07 15:51:25 -         Line(xi, yi) :> Trace ]
2018-07-07 15:51:25 -     |> Chart.Plot
2018-07-07 15:51:25 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:51:25 - //                                showlegend = false, 
2018-07-07 15:51:25 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:51:25 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:51:25 - Unexpected symbol ')' in expression. Expected ']' or other token.
2018-07-07 15:51:25 - Unmatched '['
2018-07-07 15:51:44 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:51:44 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:51:44 - let trace1' =
2018-07-07 15:51:44 -     [   Scatter(ukTractorEffectFrame
2018-07-07 15:51:44 -                 |> Frame.toArray2D
2018-07-07 15:51:44 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:51:44 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:51:44 -                 |> Array.unzip) :> Trace;
2018-07-07 15:51:44 -         Line(xi, yi) :> Trace ]
2018-07-07 15:51:44 -     |> Chart.Plot
2018-07-07 15:51:44 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:51:44 - //                                showlegend = false, 
2018-07-07 15:51:44 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:51:44 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:51:44 - The object constructor 'Scatter' takes 0 argument(s) but is here given 1. The required signature is 'new : unit -> Scatter'.
2018-07-07 15:51:44 - The object constructor 'Line' takes 0 argument(s) but is here given 2. The required signature is 'new : unit -> Line'.
2018-07-07 15:52:19 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:52:19 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:52:19 - let trace1' =
2018-07-07 15:52:19 -     [   ukTractorEffectFrame
2018-07-07 15:52:19 -                 |> Frame.toArray2D
2018-07-07 15:52:19 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:52:19 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:52:19 -                 |> Array.unzip
2018-07-07 15:52:19 -                 |> Chart.Scatter) :> Trace;
2018-07-07 15:52:19 -         Chart.Line(xi, yi) :> Trace ]
2018-07-07 15:52:19 -     |> Chart.Plot
2018-07-07 15:52:19 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:52:19 - //                                showlegend = false, 
2018-07-07 15:52:19 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:52:19 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:52:19 - Unexpected symbol ')' in expression. Expected ']' or other token.
2018-07-07 15:52:19 - Unmatched '['
2018-07-07 15:52:29 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:52:29 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:52:29 - let trace1' =
2018-07-07 15:52:29 -     [   ukTractorEffectFrame
2018-07-07 15:52:29 -                 |> Frame.toArray2D
2018-07-07 15:52:29 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:52:29 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:52:29 -                 |> Array.unzip
2018-07-07 15:52:29 -                 |> Chart.Scatter :> Trace;
2018-07-07 15:52:29 -         Chart.Line(xi, yi) :> Trace ]
2018-07-07 15:52:29 -     |> Chart.Plot
2018-07-07 15:52:29 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:52:29 - //                                showlegend = false, 
2018-07-07 15:52:29 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:52:29 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:52:29 - No overloads match for method 'Scatter'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:52:29 - Possible overload: 'static member Chart.Scatter : data:seq<#value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:52:29 -     'float [] * float []'    
2018-07-07 15:52:29 - is not compatible with type
2018-07-07 15:52:29 -     'seq<'a>'    
2018-07-07 15:52:29 - .
2018-07-07 15:52:29 - Possible overload: 'static member Chart.Scatter : data:seq<#key * #value> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:52:29 -     'float [] * float []'    
2018-07-07 15:52:29 - is not compatible with type
2018-07-07 15:52:29 -     'seq<'a * 'b>'    
2018-07-07 15:52:29 - .
2018-07-07 15:52:29 - Possible overload: 'static member Chart.Scatter : data:seq<#seq<'a1 * 'a2>> -> PlotlyChart when 'a1 :> key and 'a2 :> value'. Type constraint mismatch. The type 
2018-07-07 15:52:29 -     'float [] * float []'    
2018-07-07 15:52:29 - is not compatible with type
2018-07-07 15:52:29 -     'seq<'a>'    
2018-07-07 15:52:29 - .
2018-07-07 15:52:29 - A member or object constructor 'Line' taking 2 arguments is not accessible from this code location. All accessible versions of method 'Line' take 1 arguments.
2018-07-07 15:53:06 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:53:06 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:53:06 - let trace1' =
2018-07-07 15:53:06 -     [   ukTractorEffectFrame
2018-07-07 15:53:06 -                 |> Frame.toArray2D
2018-07-07 15:53:06 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:53:06 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:53:06 -                 |> Chart.Scatter :> Trace;
2018-07-07 15:53:06 -         Chart.Line(Seq.zip(xi)(yi) :> Trace ]
2018-07-07 15:53:06 -     |> Chart.Plot
2018-07-07 15:53:06 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:53:06 - //                                showlegend = false, 
2018-07-07 15:53:06 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:53:06 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:53:06 - Unexpected symbol ']' in expression
2018-07-07 15:53:12 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:53:12 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:53:12 - let trace1' =
2018-07-07 15:53:12 -     [   ukTractorEffectFrame
2018-07-07 15:53:12 -                 |> Frame.toArray2D
2018-07-07 15:53:12 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:53:12 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:53:12 -                 |> Chart.Scatter :> Trace;
2018-07-07 15:53:12 -         Chart.Line(Seq.zip(xi)(yi)) :> Trace ]
2018-07-07 15:53:12 -     |> Chart.Plot
2018-07-07 15:53:12 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:53:12 - //                                showlegend = false, 
2018-07-07 15:53:12 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:53:12 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:53:12 - Type constraint mismatch. The type 
2018-07-07 15:53:12 -     'PlotlyChart'    
2018-07-07 15:53:12 - is not compatible with type
2018-07-07 15:53:12 -     'Trace'    
2018-07-07 15:53:12 - Type constraint mismatch. The type 
2018-07-07 15:53:12 -     'PlotlyChart'    
2018-07-07 15:53:12 - is not compatible with type
2018-07-07 15:53:12 -     'Trace'    
2018-07-07 15:53:27 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:53:27 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:53:27 - let trace1' =
2018-07-07 15:53:27 -     [   ukTractorEffectFrame
2018-07-07 15:53:27 -                 |> Frame.toArray2D
2018-07-07 15:53:27 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:53:27 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:53:27 -                 |> Chart.Scatter;
2018-07-07 15:53:27 -         Chart.Line(Seq.zip(xi)(yi))]
2018-07-07 15:53:27 -     |> Chart.Plot
2018-07-07 15:53:27 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:53:27 - //                                showlegend = false, 
2018-07-07 15:53:27 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:53:27 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:53:27 - No overloads match for method 'Plot'. The available overloads are shown below (or in the Error List window).
2018-07-07 15:53:27 - Possible overload: 'static member Chart.Plot : data:Trace -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:53:27 -     'PlotlyChart list'    
2018-07-07 15:53:27 - is not compatible with type
2018-07-07 15:53:27 -     'Trace'    
2018-07-07 15:53:27 - .
2018-07-07 15:53:27 - Possible overload: 'static member Chart.Plot : data:seq<#Trace> -> PlotlyChart'. Type constraint mismatch. The type 
2018-07-07 15:53:27 -     'PlotlyChart list'    
2018-07-07 15:53:27 - is not compatible with type
2018-07-07 15:53:27 -     'seq<'a>'    
2018-07-07 15:53:27 - .
2018-07-07 15:54:24 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 15:54:24 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 15:54:24 - let trace1' =
2018-07-07 15:54:24 -     [   ukTractorEffectFrame
2018-07-07 15:54:24 -                 |> Frame.toArray2D
2018-07-07 15:54:24 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 15:54:24 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 15:54:24 -                 |> Array.unzip
2018-07-07 15:54:24 -                 |> fun (x,y) -> Scatter(x=x,y=y);
2018-07-07 15:54:24 -         Line(x=xi,y=yi)]
2018-07-07 15:54:24 -     |> Chart.Plot
2018-07-07 15:54:24 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 15:54:24 - //                                showlegend = false, 
2018-07-07 15:54:24 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 15:54:24 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 15:54:24 - The object constructor 'Line' has no argument or settable return property 'x'. The required signature is new : unit -> Line.
2018-07-07 16:02:29 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:02:29 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:02:29 - let trace1' =
2018-07-07 16:02:29 -     [   ukTractorEffectFrame
2018-07-07 16:02:29 -                 |> Frame.toArray2D
2018-07-07 16:02:29 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:02:29 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:02:29 -                 |> Array.unzip
2018-07-07 16:02:29 -                 |> fun (x,y) -> Scatter(x=x,y=y);
2018-07-07 16:02:29 -         Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:02:29 -     |> Chart.Plot
2018-07-07 16:02:29 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 16:02:29 - //                                showlegend = false, 
2018-07-07 16:02:29 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:02:29 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:02:31 - (xi;yi)
2018-07-07 16:02:31 - The result of this expression is implicitly ignored. Consider using 'ignore' to discard this value explicitly, e.g. 'expr |> ignore', or 'let' to bind the result to a name, e.g. 'let result = expr'.
2018-07-07 16:02:37 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:02:37 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:02:37 - let trace1' =
2018-07-07 16:02:37 -     [   ukTractorEffectFrame
2018-07-07 16:02:37 -                 |> Frame.toArray2D
2018-07-07 16:02:37 -                 |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:02:37 -                 |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:02:37 -                 |> Array.unzip
2018-07-07 16:02:37 -                 |> fun (x,y) -> Scatter(x=x,y=y);
2018-07-07 16:02:37 -         Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:02:37 -     |> Chart.Plot
2018-07-07 16:02:37 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 16:02:37 - //                                showlegend = false, 
2018-07-07 16:02:37 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:02:37 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:02:57 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:02:57 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:02:57 - [   ukTractorEffectFrame
2018-07-07 16:02:57 -             |> Frame.toArray2D
2018-07-07 16:02:57 -             |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:02:57 -             |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:02:57 -             |> Array.unzip
2018-07-07 16:02:57 -             |> fun (x,y) -> Scatter(x=x,y=y);
2018-07-07 16:02:57 -     Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:02:57 -     |> Chart.Plot
2018-07-07 16:02:57 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 16:02:57 - //                                showlegend = false, 
2018-07-07 16:02:57 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:02:57 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:03:09 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:03:09 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:03:09 - [   ukTractorEffectFrame
2018-07-07 16:03:09 -             |> Frame.toArray2D
2018-07-07 16:03:09 -             |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:03:09 -             |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:03:09 -             |> Array.unzip
2018-07-07 16:03:09 -             |> fun (x,y) -> Scatter(x=x,y=y, mode="markers");
2018-07-07 16:03:09 -     Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:03:09 -     |> Chart.Plot
2018-07-07 16:03:09 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 16:03:09 - //                                showlegend = false, 
2018-07-07 16:03:09 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:03:09 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:03:23 - let (c,m) =
2018-07-07 16:03:23 -     ukTractorEffectFrame
2018-07-07 16:03:23 -         |> Frame.toArray2D
2018-07-07 16:03:23 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:03:23 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:03:23 -         |> Array.unzip
2018-07-07 16:03:23 -         |> Fit.Line
2018-07-07 16:03:23 - m, c
2018-07-07 16:03:47 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:03:47 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:03:47 - [   ukTractorEffectFrame
2018-07-07 16:03:47 -             |> Frame.toArray2D
2018-07-07 16:03:47 -             |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:03:47 -             |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:03:47 -             |> Array.unzip
2018-07-07 16:03:47 -             |> fun (x,y) -> Scatter(x=x,y=y, mode="markers");
2018-07-07 16:03:47 -     Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:03:47 -     |> Chart.Plot
2018-07-07 16:03:47 - //    |> Figure(Layout(title = "UK Tractor Effect", 
2018-07-07 16:03:47 - //                                showlegend = false, 
2018-07-07 16:03:47 - //                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:03:47 - //                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:05:58 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:05:58 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:05:58 - [   ukTractorEffectFrame
2018-07-07 16:05:58 -             |> Frame.toArray2D
2018-07-07 16:05:58 -             |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:05:58 -             |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:05:58 -             |> Array.unzip
2018-07-07 16:05:58 -             |> fun (x,y) -> Scatter(x=x,y=y, mode="markers");
2018-07-07 16:05:58 -     Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:05:58 -     |> Chart.Plot
2018-07-07 16:05:58 -     |> Chart.WithLAyout(Layout(title = "UK Tractor Effect", 
2018-07-07 16:05:58 -                                showlegend = false, 
2018-07-07 16:05:58 -                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:05:58 -                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-07 16:05:58 - The field, constructor or member 'WithLAyout' is not defined. Maybe you want one of the following:
2018-07-07 16:05:58 -    WithLayout
2018-07-07 16:05:58 -    WithYTitle
2018-07-07 16:05:58 -    WithLabel
2018-07-07 16:06:02 - let xi = seq { 625. .. 1. .. 770. }
2018-07-07 16:06:02 - let yi = xi |> Seq.map(fun x -> m*x + c)
2018-07-07 16:06:02 - [   ukTractorEffectFrame
2018-07-07 16:06:02 -             |> Frame.toArray2D
2018-07-07 16:06:02 -             |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-07 16:06:02 -             |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-07 16:06:02 -             |> Array.unzip
2018-07-07 16:06:02 -             |> fun (x,y) -> Scatter(x=x,y=y, mode="markers");
2018-07-07 16:06:02 -     Scatter(x=xi,y=yi,mode = "lines")]
2018-07-07 16:06:02 -     |> Chart.Plot
2018-07-07 16:06:02 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-07 16:06:02 -                                showlegend = false, 
2018-07-07 16:06:02 -                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-07 16:06:02 -                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-08 13:04:02 - F# Interactive for F# 4.1
2018-07-08 13:04:02 - Freely distributed under the Apache 2.0 Open Source License
2018-07-08 13:04:02 - For help type #help;;
2018-07-08 13:04:02 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-08 13:04:02 -   seq []
2018-07-08 13:04:02 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-08 13:04:02 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-08 13:04:02 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-08 13:04:49 - let (xi_tractor, yi_tractor) =
2018-07-08 13:04:49 -     ukTractorEffectFrame
2018-07-08 13:04:49 -         |> Frame.toArray2D
2018-07-08 13:04:49 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-08 13:04:49 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-08 13:04:49 -         |> Array.unzip
2018-07-08 13:04:49 -         
2018-07-08 13:04:49 - let (c,m) =
2018-07-08 13:04:49 -     (xi_tractor, yi_tractor
2018-07-08 13:04:49 -         |> Fit.Line
2018-07-08 13:04:49 - m, c
2018-07-08 13:04:49 - Unmatched '('
2018-07-08 13:04:49 - The value or constructor 'ukTractorEffectFrame' is not defined.
2018-07-08 13:04:49 - The value, namespace, type or module 'Frame' is not defined.
2018-07-08 13:04:49 - The value, namespace, type or module 'Double' is not defined. Maybe you want one of the following:
2018-07-08 13:04:49 -    double
2018-07-08 13:04:49 - The value, namespace, type or module 'Double' is not defined. Maybe you want one of the following:
2018-07-08 13:04:49 -    double
2018-07-08 13:04:55 - let (xi_tractor, yi_tractor) =
2018-07-08 13:04:55 -     ukTractorEffectFrame
2018-07-08 13:04:55 -         |> Frame.toArray2D
2018-07-08 13:04:55 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-08 13:04:55 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-08 13:04:55 -         |> Array.unzip
2018-07-08 13:04:55 -         
2018-07-08 13:04:55 - let (c,m) =
2018-07-08 13:04:55 -     (xi_tractor, yi_tractor)
2018-07-08 13:04:55 -         |> Fit.Line
2018-07-08 13:04:55 - m, c
2018-07-08 13:04:55 - The value or constructor 'ukTractorEffectFrame' is not defined.
2018-07-08 13:04:55 - The value, namespace, type or module 'Frame' is not defined.
2018-07-08 13:04:55 - The value, namespace, type or module 'Double' is not defined. Maybe you want one of the following:
2018-07-08 13:04:55 -    double
2018-07-08 13:04:55 - The value, namespace, type or module 'Double' is not defined. Maybe you want one of the following:
2018-07-08 13:04:55 -    double
2018-07-08 13:04:55 - The value, namespace, type or module 'Fit' is not defined. Maybe you want one of the following:
2018-07-08 13:04:55 -    it
2018-07-08 13:04:55 -    fst
2018-07-08 13:05:01 - #load "Paket.fsx"
2018-07-08 13:05:01 - Paket.Package [
2018-07-08 13:05:01 -     "FSharp.Data"
2018-07-08 13:05:01 -     "Deedle"
2018-07-08 13:05:01 -     "XPlot.Plotly"
2018-07-08 13:05:01 -     ]
2018-07-08 13:05:01 - #load "Paket.Generated.Refs.fsx"
2018-07-08 13:05:16 - open System
2018-07-08 13:05:16 - open FSharp.Data
2018-07-08 13:05:16 - open Deedle
2018-07-08 13:05:16 - #load "XPlot.Plotly.fsx"
2018-07-08 13:05:16 - open XPlot.Plotly
2018-07-08 13:05:16 - let wb = WorldBankData.GetDataContext()
2018-07-08 13:05:17 - let ukCerealYields = 
2018-07-08 13:05:17 -     wb.Countries.``United Kingdom``
2018-07-08 13:05:17 -         .Indicators.``Cereal yield (kg per hectare)``
2018-07-08 13:05:17 - let ukTractorDensities =
2018-07-08 13:05:17 -     wb.Countries.``United Kingdom``
2018-07-08 13:05:17 -         .Indicators.``Agricultural machinery, tractors per 100 sq. km of arable land``
2018-07-08 13:05:22 - ukTractorDensities
2018-07-08 13:05:22 -     |> Chart.Line
2018-07-08 13:05:22 -     |> Chart.WithLayout(Layout(title = "UK Tractor Density",
2018-07-08 13:05:22 -                                 showlegend = false, 
2018-07-08 13:05:22 -                                 xaxis=Xaxis(title="Year"),
2018-07-08 13:05:22 -                                 yaxis=Yaxis(title="Tractors per 100 sq. km")))
2018-07-08 13:05:22 - let ukTractorEffectFrame =
2018-07-08 13:05:22 -     frame [
2018-07-08 13:05:22 -             "ukCerealYield" => Series(ukCerealYields |> dict);
2018-07-08 13:05:22 -             "ukTractorDensity" => Series(ukTractorDensities |> dict)
2018-07-08 13:05:22 -             ]
2018-07-08 13:05:23 - ukTractorEffectFrame
2018-07-08 13:05:23 -     |> Frame.toArray2D
2018-07-08 13:05:23 -     |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-08 13:05:23 -     |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-08 13:05:23 -     |> Chart.Scatter
2018-07-08 13:05:23 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-08 13:05:23 -                                 showlegend = false, 
2018-07-08 13:05:23 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-08 13:05:23 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-08 13:05:23 -                                     
2018-07-08 13:14:13 - let (xi_tractor, yi_tractor) =
2018-07-08 13:14:13 -     ukTractorEffectFrame
2018-07-08 13:14:13 -         |> Frame.toArray2D
2018-07-08 13:14:13 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-08 13:14:13 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-08 13:14:13 -         |> Array.unzip
2018-07-08 13:14:13 -         
2018-07-08 13:14:13 - let (c,m) =
2018-07-08 13:14:13 -     (xi_tractor, yi_tractor)
2018-07-08 13:14:13 -         |> Fit.Line
2018-07-08 13:14:13 - m, c
2018-07-08 13:14:13 - The value, namespace, type or module 'Fit' is not defined. Maybe you want one of the following:
2018-07-08 13:14:13 -    it
2018-07-08 13:14:13 -    fst
2018-07-08 13:14:19 - Paket.Package [
2018-07-08 13:14:19 -     "MathNet.Numerics"
2018-07-08 13:14:19 -     "MathNet.Numerics.FSharp"
2018-07-08 13:14:19 -     ]
2018-07-08 13:14:19 - #load "Paket.Generated.Refs.fsx"
2018-07-08 13:14:50 - open MathNet.Numerics
2018-07-08 13:14:50 - let (xi_tractor, yi_tractor) =
2018-07-08 13:14:50 -     ukTractorEffectFrame
2018-07-08 13:14:50 -         |> Frame.toArray2D
2018-07-08 13:14:50 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-08 13:14:50 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-08 13:14:50 -         |> Array.unzip
2018-07-08 13:14:50 -         
2018-07-08 13:14:50 - let (c,m) =
2018-07-08 13:14:50 -     (xi_tractor, yi_tractor)
2018-07-08 13:14:50 -         |> Fit.Line
2018-07-08 13:14:50 - m, c
2018-07-08 13:16:02 - let xi_trend = seq { 625. .. 1. .. 770. }
2018-07-08 13:16:02 - let yi_trend = xi_trend |> Seq.map(fun x -> m*x + c)
2018-07-08 13:16:02 - [   Scatter(x=xi_tractor,y=yi_tractor, mode="markers");
2018-07-08 13:16:02 -     Scatter(x=xi_trend,y=yi_trend,mode = "lines")]
2018-07-08 13:16:02 -     |> Chart.Plot
2018-07-08 13:16:02 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-08 13:16:02 -                                showlegend = false, 
2018-07-08 13:16:02 -                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-08 13:16:02 -                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
<<<<<<< HEAD
2018-07-14 17:05:58 - F# Interactive for F# 4.1
2018-07-14 17:05:58 - Freely distributed under the Apache 2.0 Open Source License
2018-07-14 17:05:58 - For help type #help;;
2018-07-14 17:05:58 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-14 17:05:58 -   seq []
2018-07-14 17:05:58 - --> Added 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-14 17:05:58 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-14 17:05:58 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-14 19:10:00 - shutdown request
2018-07-14 19:10:04 - F# Interactive for F# 4.1
2018-07-14 19:10:04 - Freely distributed under the Apache 2.0 Open Source License
2018-07-14 19:10:04 - For help type #help;;
2018-07-14 19:10:04 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-14 19:10:04 -   seq []
2018-07-14 19:10:04 - --> Added 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-14 19:10:04 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-14 19:10:04 - --> Referenced 'C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-14 19:10:05 - #load "Paket.fsx"
2018-07-14 19:10:05 - Paket.Package [
2018-07-14 19:10:05 -     "FSharp.Data"
2018-07-14 19:10:05 -     "Deedle"
2018-07-14 19:10:05 -     "XPlot.Plotly"
2018-07-14 19:10:05 -     ]
2018-07-14 19:10:05 - #load "Paket.Generated.Refs.fsx"
2018-07-14 19:10:24 - open System
2018-07-14 19:10:24 - open FSharp.Data
2018-07-14 19:10:24 - open Deedle
2018-07-14 19:10:24 - #load "XPlot.Plotly.fsx"
2018-07-14 19:10:24 - open XPlot.Plotly
2018-07-14 19:10:25 - let wb = WorldBankData.GetDataContext()
2018-07-14 19:10:25 - let ukCerealYields = 
2018-07-14 19:10:25 -     wb.Countries.``United Kingdom``
2018-07-14 19:10:25 -         .Indicators.``Cereal yield (kg per hectare)``
2018-07-14 19:10:25 - let ukTractorDensities =
2018-07-14 19:10:25 -     wb.Countries.``United Kingdom``
2018-07-14 19:10:25 -         .Indicators.``Agricultural machinery, tractors per 100 sq. km of arable land``
2018-07-14 19:10:29 - ukTractorDensities
2018-07-14 19:10:29 -     |> Chart.Line
2018-07-14 19:10:29 -     |> Chart.WithLayout(Layout(title = "UK Tractor Density",
2018-07-14 19:10:29 -                                 showlegend = false, 
2018-07-14 19:10:29 -                                 xaxis=Xaxis(title="Year"),
2018-07-14 19:10:29 -                                 yaxis=Yaxis(title="Tractors per 100 sq. km")))
2018-07-14 19:10:29 - let ukTractorEffectFrame =
2018-07-14 19:10:29 -     frame [
2018-07-14 19:10:29 -             "ukCerealYield" => Series(ukCerealYields |> dict);
2018-07-14 19:10:29 -             "ukTractorDensity" => Series(ukTractorDensities |> dict)
2018-07-14 19:10:29 -             ]
2018-07-14 19:10:30 - ukTractorEffectFrame
2018-07-14 19:10:30 -     |> Frame.toArray2D
2018-07-14 19:10:30 -     |> fun f -> seq {for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0])}
2018-07-14 19:10:30 -     |> Seq.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-14 19:10:30 -     |> Chart.Scatter
2018-07-14 19:10:30 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-14 19:10:30 -                                 showlegend = false, 
2018-07-14 19:10:30 -                                 xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-14 19:10:30 -                                 yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
2018-07-14 19:10:30 -                                     
2018-07-14 19:10:30 - Paket.Package [
2018-07-14 19:10:30 -     "MathNet.Numerics"
2018-07-14 19:10:30 -     "MathNet.Numerics.FSharp"
2018-07-14 19:10:30 -     ]
2018-07-14 19:10:30 - #load "Paket.Generated.Refs.fsx"
2018-07-14 19:10:37 - Expression evaluation failed: Error during cleaning of C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\packages\MathNet.Numerics.FSharp
2018-07-14 19:10:37 -   - Access to the path 'MathNet.Numerics.FSharp.dll' is denied.
2018-07-14 19:10:37 - ExceptionError during cleaning of C:\Users\Mille\Downloads\IfSharp.v3.0.0-beta3\packages\MathNet.Numerics.FSharp
2018-07-14 19:10:37 -   - Access to the path 'MathNet.Numerics.FSharp.dll' is denied.
2018-07-14 19:10:37 -    at Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThenFail@1379.Invoke(String message)
2018-07-14 19:10:37 -    at Paket.Utils.CleanDir(String path)
2018-07-14 19:10:37 -    at Paket.NuGet.downloadAndExtractPackage(FSharpOption`1 alternativeProjectRoot, String root, Boolean isLocalOverride, PackagesFolderGroupConfig config, PackageSource source, FSharpList`1 caches, GroupName groupName, PackageName packageName, SemVerInfo version, ResolvedPackageKind kind, Boolean includeVersionInPath, Boolean downloadLicense, Boolean force, Boolean detailed)
2018-07-14 19:10:37 -    at Paket.RestoreProcess.downloadAndExtract@42-1.Invoke(Unit unitVar)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Control.AsyncBuilderImpl.callA@839.Invoke(AsyncParams`1 args)
2018-07-14 19:10:37 - --- End of stack trace from previous location where exception was thrown ---
2018-07-14 19:10:37 -    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
2018-07-14 19:10:37 -    at Microsoft.FSharp.Control.AsyncBuilderImpl.commit[a](AsyncImplResult`1 res)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Control.CancellationTokenOps.RunSynchronouslyInCurrentThread[a](CancellationToken token, FSharpAsync`1 computation)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Control.CancellationTokenOps.RunSynchronously[a](CancellationToken token, FSharpAsync`1 computation, FSharpOption`1 timeout)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Control.FSharpAsync.RunSynchronously[T](FSharpAsync`1 computation, FSharpOption`1 timeout, FSharpOption`1 cancellationToken)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Collections.Internal.IEnumerator.map@74.DoMoveNext(b& )
2018-07-14 19:10:37 -    at Microsoft.FSharp.Collections.Internal.IEnumerator.MapEnumerator`1.System-Collections-IEnumerator-MoveNext()
2018-07-14 19:10:37 -    at Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.takeOuter@274[T,TResult](ConcatEnumerator`2 x, Unit unitVar0)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.takeOuter@274[T,TResult](ConcatEnumerator`2 x, Unit unitVar0)
2018-07-14 19:10:37 -    at System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)
2018-07-14 19:10:37 -    at Microsoft.FSharp.Collections.SeqModule.ToArray[T](IEnumerable`1 source)
2018-07-14 19:10:37 -    at Paket.InstallProcess.InstallIntoProjects[a](InstallerOptions options, Boolean forceTouch, DependenciesFile dependenciesFile, LockFile lockFile, FSharpList`1 projectsAndReferences, FSharpMap`2 updatedGroups)
2018-07-14 19:10:37 -    at Paket.UpdateProcess.SmartInstall(DependenciesFile dependenciesFile, UpdateMode updateMode, UpdaterOptions options)
2018-07-14 19:10:37 -    at <StartupCode$Paket-Core>.$PublicAPI.Install@232.Invoke(Unit unitVar0)
2018-07-14 19:10:37 -    at Paket.Utils.RunInLockedAccessMode[a](String rootFolder, FSharpFunc`2 action)
2018-07-14 19:10:37 -    at <StartupCode$FSI_0018>.$FSI_0018.main@()
2018-07-14 19:10:37 - open MathNet.Numerics
2018-07-14 19:10:37 - let (xi_tractor, yi_tractor) =
2018-07-14 19:10:37 -     ukTractorEffectFrame
2018-07-14 19:10:37 -         |> Frame.toArray2D
2018-07-14 19:10:37 -         |> fun f -> [| for i in 0..(Array2D.length1(f)-1) do yield (f.[i,1], f.[i,0]) |]
2018-07-14 19:10:37 -         |> Array.filter(fun (x,y) -> not (Double.IsNaN(x) || Double.IsNaN(y)))
2018-07-14 19:10:37 -         |> Array.unzip
2018-07-14 19:10:37 -         
2018-07-14 19:10:37 - let (c,m) =
2018-07-14 19:10:37 -     (xi_tractor, yi_tractor)
2018-07-14 19:10:37 -         |> Fit.Line
2018-07-14 19:10:37 - m, c
2018-07-14 19:10:37 - ukTractorEffectFrame.Columns |> dict
2018-07-14 19:10:37 - The type 'ColumnSeries<int,string>' is not compatible with the type 'seq<obj * obj>'
2018-07-14 19:10:37 - ukTractorEffectFrame.Columns |> Array.map(fun s -> s)
2018-07-14 19:10:37 - Type mismatch. Expecting a
2018-07-14 19:10:37 -     'ColumnSeries<int,string> -> obj'    
2018-07-14 19:10:37 - but given a
2018-07-14 19:10:37 -     'obj [] -> obj []'    
2018-07-14 19:10:37 - The type 'ColumnSeries<int,string>' does not match the type 'obj []'
2018-07-14 19:10:37 - Type mismatch. Expecting a
2018-07-14 19:10:37 -     'ColumnSeries<int,string> -> obj'    
2018-07-14 19:10:37 - but given a
2018-07-14 19:10:37 -     'obj [] -> obj []'    
2018-07-14 19:10:37 - The type 'ColumnSeries<int,string>' does not match the type 'obj []'
2018-07-14 19:10:37 - ukTractorEffectFrame.Columns |> Seq.map(fun s -> s)
2018-07-14 19:10:37 - The type 'ColumnSeries<int,string>' is not compatible with the type 'seq<obj>'
2018-07-14 19:10:37 - let xi_trend = seq { 625. .. 1. .. 770. }
2018-07-14 19:10:37 - let yi_trend = xi_trend |> Seq.map(fun x -> m*x + c)
2018-07-14 19:10:37 - [   Scatter(x=xi_tractor,y=yi_tractor, mode="markers");
2018-07-14 19:10:37 -     Scatter(x=xi_trend,y=yi_trend,mode = "lines")]
2018-07-14 19:10:37 -     |> Chart.Plot
2018-07-14 19:10:37 -     |> Chart.WithLayout(Layout(title = "UK Tractor Effect", 
2018-07-14 19:10:37 -                                showlegend = false, 
2018-07-14 19:10:37 -                                xaxis=Xaxis(title="Tractor Density (units per 100 sq. km)"),
2018-07-14 19:10:37 -                                yaxis=Yaxis(title="Cereal Yield (kg per hectare)")))
=======
2018-07-09 14:29:03 - F# Interactive for F# 4.1
2018-07-09 14:29:03 - Freely distributed under the Apache 2.0 Open Source License
2018-07-09 14:29:03 - For help type #help;;
2018-07-09 14:29:03 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-09 14:29:03 -   seq []
2018-07-09 14:29:03 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-09 14:29:03 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-09 14:29:03 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
2018-07-10 19:49:09 - F# Interactive for F# 4.1
2018-07-10 19:49:10 - Freely distributed under the Apache 2.0 Open Source License
2018-07-10 19:49:10 - For help type #help;;
2018-07-10 19:49:10 - > val it : ResizeArray<System.Type * (obj -> seq<string * string> * string)> =
2018-07-10 19:49:10 -   seq []
2018-07-10 19:49:10 - --> Added 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3' to library include path
2018-07-10 19:49:10 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\IfSharp.Kernel.dll' (file may be locked by F# Interactive process)
2018-07-10 19:49:10 - --> Referenced 'C:\Users\David\Downloads\IfSharp.v3.0.0-beta3\NetMQ.dll' (file may be locked by F# Interactive process)
>>>>>>> e93d1a6c73c7a0f638e7d9ea80fefdc62bb2dbbd
